diff --git a/arch/x86/kvm/cpuid.c b/arch/x86/kvm/cpuid.c
index 7bcfa61375c0..19a5b8b7c140 100644
--- a/arch/x86/kvm/cpuid.c
+++ b/arch/x86/kvm/cpuid.c
@@ -17,7 +17,9 @@
 #include <linux/vmalloc.h>
 #include <linux/uaccess.h>
 #include <linux/sched/stat.h>
+#include <linux/kernel.h>
 
+#include <asm/atomic.h>
 #include <asm/processor.h>
 #include <asm/user.h>
 #include <asm/fpu/xstate.h>
@@ -27,6 +29,13 @@
 #include "trace.h"
 #include "pmu.h"
 
+atomic_t exit_count = ATOMIC_INIT(0);
+EXPORT_SYMBOL(exit_count);
+//Declare and initialize exit_processing_time :Preethi T G
+atomic64_t exit_processing_time = ATOMIC64_INIT(0);
+EXPORT_SYMBOL(exit_processing_time);
+
+
 static u32 xstate_required_size(u64 xstate_bv, bool compacted)
 {
 	int feature_bit = 0;
@@ -939,17 +948,38 @@ EXPORT_SYMBOL_GPL(kvm_cpuid);
 int kvm_emulate_cpuid(struct kvm_vcpu *vcpu)
 {
 	u32 eax, ebx, ecx, edx;
-
 	if (cpuid_fault_enabled(vcpu) && !kvm_require_cpl(vcpu, 0))
 		return 1;
 
 	eax = kvm_register_read(vcpu, VCPU_REGS_RAX);
 	ecx = kvm_register_read(vcpu, VCPU_REGS_RCX);
-	kvm_cpuid(vcpu, &eax, &ebx, &ecx, &edx, true);
-	kvm_register_write(vcpu, VCPU_REGS_RAX, eax);
-	kvm_register_write(vcpu, VCPU_REGS_RBX, ebx);
-	kvm_register_write(vcpu, VCPU_REGS_RCX, ecx);
-	kvm_register_write(vcpu, VCPU_REGS_RDX, edx);
+	if (eax == 0x4FFFFFFF) {
+
+		/*Return the high 32 bits of the total time spent processing all exits in %ebx
+		Return the low 32 bits of the total time spent processing all exits in %ecx Preethi T G*/
+		u64 display_exit_time = atomic64_read(&exit_processing_time);
+		printk(KERN_WARNING "\n cpuid emulation - leaf 0x4FFFFFFF\n");
+		ebx = display_exit_time >> 32;
+		printk(KERN_WARNING "\ndisplay exit time: %llu\n", display_exit_time);
+		printk(KERN_WARNING "\nnew value for ebx - high bits of exit time value: %u\n", ebx);
+		ecx = display_exit_time;
+		printk(KERN_WARNING "\nnew value for ecx - low bits of exit time value: %u\n", ecx);
+
+		eax = atomic_read(&exit_count);
+		printk(KERN_WARNING "\n hnew value for eax - exit counter: %u\n", eax);
+		kvm_register_write(vcpu, VCPU_REGS_RBX, ebx);
+		kvm_register_write(vcpu, VCPU_REGS_RCX, ecx);
+		// kvm_cpuid(vcpu, &eax, &ebx, &ecx, &edx, true);
+		kvm_register_write(vcpu, VCPU_REGS_RAX, eax);
+
+	} else {
+		kvm_cpuid(vcpu, &eax, &ebx, &ecx, &edx, true);
+		kvm_register_write(vcpu, VCPU_REGS_RAX, eax);
+		kvm_register_write(vcpu, VCPU_REGS_RBX, ebx);
+		kvm_register_write(vcpu, VCPU_REGS_RCX, ecx);
+		kvm_register_write(vcpu, VCPU_REGS_RDX, edx);
+	}
+	
 	return kvm_skip_emulated_instruction(vcpu);
 }
 EXPORT_SYMBOL_GPL(kvm_emulate_cpuid);
diff --git a/arch/x86/kvm/vmx.c b/arch/x86/kvm/vmx.c
index 4555077d69ce..69eee45bf627 100644
--- a/arch/x86/kvm/vmx.c
+++ b/arch/x86/kvm/vmx.c
@@ -33,6 +33,7 @@
 #include <linux/trace_events.h>
 #include <linux/slab.h>
 #include <linux/tboot.h>
+#include <linux/types.h>
 #include <linux/hrtimer.h>
 #include <linux/frame.h>
 #include <linux/nospec.h>
@@ -40,6 +41,7 @@
 #include "x86.h"
 
 #include <asm/asm.h>
+#include <asm/atomic.h>
 #include <asm/cpu.h>
 #include <asm/io.h>
 #include <asm/desc.h>
@@ -192,6 +194,8 @@ module_param(ple_window_max, uint, 0444);
 
 extern const ulong vmx_return;
 extern const ulong vmx_early_consistency_check_return;
+extern atomic_t exit_count;
+extern atomic64_t exit_processing_time;
 
 static DEFINE_STATIC_KEY_FALSE(vmx_l1d_should_flush);
 static DEFINE_STATIC_KEY_FALSE(vmx_l1d_flush_cond);
@@ -10506,6 +10510,7 @@ static void dump_vmcs(void)
 		       vmcs_read16(VIRTUAL_PROCESSOR_ID));
 }
 
+
 /*
  * The guest has exited.  See if we can fix it or if we need userspace
  * assistance.
@@ -10515,9 +10520,16 @@ static int vmx_handle_exit(struct kvm_vcpu *vcpu)
 	struct vcpu_vmx *vmx = to_vmx(vcpu);
 	u32 exit_reason = vmx->exit_reason;
 	u32 vectoring_info = vmx->idt_vectoring_info;
-
+	int result = 0;
+	//Declare and initialize variables to store rdtsc before and after exit emulation 
+	u64 start_exit_time = 0;
+	u64 end_exit_time = 0;
+	u64 delta = 0;
+	//End of declaration 
+	start_exit_time = rdtsc();
 	trace_kvm_exit(exit_reason, vcpu, KVM_ISA_VMX);
-
+	// increase exit_count
+	atomic_inc(&exit_count);
 	/*
 	 * Flush logged GPAs PML buffer, this will make dirty_bitmap more
 	 * updated. Another good is, in kvm_vm_ioctl_get_dirty_log, before
@@ -10529,11 +10541,23 @@ static int vmx_handle_exit(struct kvm_vcpu *vcpu)
 		vmx_flush_pml_buffer(vcpu);
 
 	/* If guest state is invalid, start emulating */
-	if (vmx->emulation_required)
-		return handle_invalid_guest_state(vcpu);
+	if (vmx->emulation_required) {
+		result = handle_invalid_guest_state(vcpu);
+		end_exit_time = rdtsc();
+		delta = end_exit_time - start_exit_time; 
+		atomic64_add(delta, &exit_processing_time);
+		return result;
+	}
+		
+
+	if (is_guest_mode(vcpu) && nested_vmx_exit_reflected(vcpu, exit_reason)) {
+		result = nested_vmx_reflect_vmexit(vcpu, exit_reason);
+		end_exit_time = rdtsc();
+		delta = end_exit_time - start_exit_time; 
+		atomic64_add(delta, &exit_processing_time);
+		return result;
+	}
 
-	if (is_guest_mode(vcpu) && nested_vmx_exit_reflected(vcpu, exit_reason))
-		return nested_vmx_reflect_vmexit(vcpu, exit_reason);
 
 	if (exit_reason & VMX_EXIT_REASONS_FAILED_VMENTRY) {
 		dump_vmcs();
@@ -10596,8 +10620,15 @@ static int vmx_handle_exit(struct kvm_vcpu *vcpu)
 	}
 
 	if (exit_reason < kvm_vmx_max_exit_handlers
-	    && kvm_vmx_exit_handlers[exit_reason])
-		return kvm_vmx_exit_handlers[exit_reason](vcpu);
+	    && kvm_vmx_exit_handlers[exit_reason]) {
+		//Code to calculate total time spent processing all exits
+		result = kvm_vmx_exit_handlers[exit_reason](vcpu);
+		end_exit_time = rdtsc();
+		delta = end_exit_time - start_exit_time; 
+		atomic64_add(delta, &exit_processing_time);
+		return result;
+	}
+		
 	else {
 		vcpu_unimpl(vcpu, "vmx: unexpected exit reason 0x%x\n",
 				exit_reason);
